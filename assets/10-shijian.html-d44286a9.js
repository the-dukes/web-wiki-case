import{_ as n,o as s,c as a,a as t}from"./app-0e5daedb.js";const e="/web-wiki-case/assets/js10-1-baab1e83.png",p="/web-wiki-case/assets/js10-2-93409afa.png",o="/web-wiki-case/assets/js10-3-4b9dc32e.png",c="/web-wiki-case/assets/js10-4-bcaa020a.png",i={},l=t(`<h1 id="_10-如何绑定事件" tabindex="-1"><a class="header-anchor" href="#_10-如何绑定事件" aria-hidden="true">#</a> 10-如何绑定事件</h1><h2 id="句柄式绑定" tabindex="-1"><a class="header-anchor" href="#句柄式绑定" aria-hidden="true">#</a> 句柄式绑定</h2><blockquote><p><code>ele.onxxx = function (event) {}</code></p><p>兼容性很好，但是一个元素只能绑定一个事件处理程序。</p></blockquote><p><strong>基本等同于写在 HTML 行间上：</strong></p><blockquote><p><code>&lt;div onclick=&quot;consolo.log(&#39;a&#39;)&quot;&gt; &lt;/div&gt; </code>是句柄的绑定方式，写在行间不用写 <code>function(){}</code></p></blockquote><h2 id="ele-addeventlistener" tabindex="-1"><a class="header-anchor" href="#ele-addeventlistener" aria-hidden="true">#</a> ele.addEventListener</h2><blockquote><p><code>ele.addEventListener(type, fn, false);</code></p><p>IE9 以下不兼容，可以为一个事件绑定多个处理程序。</p></blockquote><p><strong>案例：</strong></p><blockquote><p>div.addEventListener（&#39;事件类型&#39;，处理函数，false）。</p><p>function(){} 是函数引用，和外面定义一个 function test(){}直接写 test 是一样的。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span>addEventListener（‘click’，<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>，<span class="token boolean">false</span>）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ele-attachevent" tabindex="-1"><a class="header-anchor" href="#ele-attachevent" aria-hidden="true">#</a> ele.attachEvent</h2><blockquote><p><code>ele.attachEvent(&#39;on&#39; + type, fn);</code></p><p>IE 独有，一个事件同样可以绑定多个处理程序，**同一个函数绑定多次都可以。 **</p></blockquote><p><strong>案例：</strong></p><blockquote><p>div.attachEvent(&#39;on&#39; + 事件类型，处理函数);</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    div<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;onclick&#39;</span>，<span class="token keyword">function</span>（）<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="事件处理程序的运行环境" tabindex="-1"><a class="header-anchor" href="#事件处理程序的运行环境" aria-hidden="true">#</a> 事件处理程序的运行环境</h2><h3 id="ele-onxxx" tabindex="-1"><a class="header-anchor" href="#ele-onxxx" aria-hidden="true">#</a> ele.onxxx</h3><p>程序 this 指向是 dom 元素本身（指向自己）</p><h3 id="obj-addeventlistener" tabindex="-1"><a class="header-anchor" href="#obj-addeventlistener" aria-hidden="true">#</a> obj.addEventListener</h3><blockquote><p>程序 this 指向是 dom 元素本身（指向自己）</p></blockquote><h2 id="obj-attachevent" tabindex="-1"><a class="header-anchor" href="#obj-attachevent" aria-hidden="true">#</a> obj.attachEvent</h2><blockquote><p>程序 this 指向 window。</p></blockquote><p><strong>案例：例让 obj.attachEvent 指向自己</strong></p><blockquote><p>封装 function handle(){}里面是事件处理程序。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;onclick&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">handle</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;div style=&quot;width : 100px;height : 100px; background-color: #f40;&quot;&gt;&lt;/div&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="封装兼容性的-addevent" tabindex="-1"><a class="header-anchor" href="#封装兼容性的-addevent" aria-hidden="true">#</a> 封装兼容性的 addEvent</h2><blockquote><p><code>addEvent(elem, type, handle);</code> addEvent 是给一个 dom 对象添加一个该事件类型的处理函数。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>elem<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>elem<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    elem<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">handle</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    elem<span class="token punctuation">[</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> handle<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">addEvent</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="解除事件处理程序" tabindex="-1"><a class="header-anchor" href="#解除事件处理程序" aria-hidden="true">#</a> 解除事件处理程序</h1><blockquote><p>若绑定匿名函数，则无法解除。</p></blockquote><pre><code>// 解除 ele.onxxx = function (event) {}ele.onclick=false/&#39;&#39;/null;
// 解除 addEventListener(type, fn, false)ele.removeEventListener(type, fn, false);
// 解除 ele.attachEvent(‘on’ + type, fn);ele.detachEvent(‘on’+type, fn); ==&gt;ele.attachEvent(‘on’+type, fn);
</code></pre><h1 id="事件处理模型" tabindex="-1"><a class="header-anchor" href="#事件处理模型" aria-hidden="true">#</a> 事件处理模型</h1><p>事件处理的两个模型：事件冒泡、捕获（不能同时存在）</p><h2 id="事件冒泡" tabindex="-1"><a class="header-anchor" href="#事件冒泡" aria-hidden="true">#</a> 事件冒泡</h2><blockquote><p>事件冒泡： 结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，即同一事件，自子元素冒泡向父元素（自底向上） 。</p></blockquote><p><strong>案例：</strong></p><blockquote><p>只点黄色的，出现了 box,content,wrapper。</p></blockquote><p><img src="`+e+'" alt="image.png"></p><p><strong>不冒泡事件：</strong></p><blockquote><p>focus，blur，change，submit，reset，select 等事件不冒泡。</p></blockquote><h2 id="事件捕获" tabindex="-1"><a class="header-anchor" href="#事件捕获" aria-hidden="true">#</a> 事件捕获</h2><blockquote><p>事件捕获：</p><p>只有谷歌有，最新火狐有。 结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，即同一事件，自父元素捕获至子元素（事件源元素）。 IE 没有捕获事件一个对象的一个事件类。</p></blockquote><p><strong>案例：</strong></p><blockquote><p>点击黄色盒子：先红的捕获事件执行，再绿的捕获事件执行，最后黄的执行事件执行。 捕获是把结构的最外面先抓住。最外面先捕获，再一层层向里面捕获，最里面的是按常规执行。把 false 改成 true，就变成了事件捕获。</p></blockquote><p><img src="'+p+'" alt="image.png"></p><h2 id="触发顺序" tabindex="-1"><a class="header-anchor" href="#触发顺序" aria-hidden="true">#</a> 触发顺序</h2><blockquote><p>先捕获，后冒泡。</p><p>同一个对象的一个事件处理类型，上面绑定了两个事件处理，分别执行事件冒泡和 事件执行（谁先绑定，谁先执行）。</p></blockquote><p><strong>案例：点击黄色盒子。</strong></p><blockquote><p>先捕获后冒泡。</p></blockquote><p><img src="'+o+'" alt="image.png">** **</p><blockquote><p>改变冒泡和捕获的顺序。</p><p>这个的顺序是先捕获红色，再捕获绿色，boxBubble 黄色区域事件执行，box 黄色区域事件执行（谁先绑定，谁先执行，boxBubble 先绑定， 所以先执行），冒泡到绿色，冒泡到红色。</p></blockquote><p><img src="'+c+`" alt="image.png"></p><h2 id="取消冒泡和阻止默认事件" tabindex="-1"><a class="header-anchor" href="#取消冒泡和阻止默认事件" aria-hidden="true">#</a> 取消冒泡和阻止默认事件</h2><p><strong>事件对象：</strong></p><blockquote><p>在每一个事件处理函数中【div.onclick=function(){}】，我们可以写一个形参（如 e）， 系统可以传递事件对象（记载了事件发生时的状态和信息）到这个参数里面去。</p></blockquote><h3 id="取消冒泡" tabindex="-1"><a class="header-anchor" href="#取消冒泡" aria-hidden="true">#</a> 取消冒泡</h3><blockquote><p>1）W3C 标准 event.stopPropagation();但不支持 ie9 以下版本</p><p>2）IE 独有 event.cancelBubble = true;【实际上谷歌也实现了】</p></blockquote><p><strong>封装取消冒泡的函数：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">stopBubble</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="阻止默认事件" tabindex="-1"><a class="header-anchor" href="#阻止默认事件" aria-hidden="true">#</a> 阻止默认事件</h3><blockquote><p>1）默认事件 — 表单提交，a 标签跳转，右键菜单等</p><p>return false; 兼容性非常好，以对象属性的方式注册的事件才生效（这是句柄的 方式阻止默认事件，只有句柄的方式绑定事件才好使）</p><p>ele.onxxx = function (event) {} 是句柄的绑定方式，才能用 return false;</p><p>3）event.preventDefault(); W3C 标注，IE9 以下不兼容</p><p>4）event.returnValue = false; 兼容 IE</p></blockquote><p><strong>封装阻止默认事件的函数：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">cancelHandler</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>tips：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;javascript:void()&quot;</span><span class="token operator">&gt;</span>demo<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span> <span class="token comment">// void()  相当于写return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-5-事件对象" tabindex="-1"><a class="header-anchor" href="#_4-5-事件对象" aria-hidden="true">#</a> 4.5 事件对象</h2><p><strong>事件对象：</strong></p><blockquote><p>在每一个事件处理函数中【div.onclick=function(){}】，我们可以写一个形参（如 e）， 系统可以传递事件对象非 ie 浏览器会把事件对象（记载了事件发生时的状态和信息）打包传到参数里面去。 ie 浏览器在 window.event 里面储存事件对象。</p></blockquote><p><strong>兼容性写法：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  varevent <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件源对象" tabindex="-1"><a class="header-anchor" href="#事件源对象" aria-hidden="true">#</a> 事件源对象</h2><blockquote><p>触发事件的地方叫事件源。事件对象上有个专门的信息是存储事件源的。</p><p><code>event.target</code> 火狐独有的 。</p><p><code>event.srcElement</code> IE 独有的。</p><p>chrome 都有。</p></blockquote><p><strong>兼容性写法：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> event <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
  <span class="token keyword">var</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token operator">||</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件委托" tabindex="-1"><a class="header-anchor" href="#事件委托" aria-hidden="true">#</a> 事件委托</h2><p><strong>事件委托：</strong> 利用事件冒泡，和事件源对象进行处理。</p><p><strong>优点：</strong></p><ul><li>性能：不需要循环所有的元素一个个绑定事件</li><li>灵活：当有新的子元素时不需要重新绑定事件</li></ul><h2 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法" aria-hidden="true">#</a> 其他方法</h2><p><strong>currentTarget：</strong></p><p>当前目标：获取绑定事件的元素，等效于 this</p><p><strong>type：</strong></p><p>字符串，得到事件的类型</p><p><strong>eventPhase：</strong></p><p>得到事件所处的阶段</p><p>1： 事件捕获 2： 事件目标 3： 事件冒泡</p><h1 id="鼠标事件" tabindex="-1"><a class="header-anchor" href="#鼠标事件" aria-hidden="true">#</a> 鼠标事件</h1><h2 id="事件类型" tabindex="-1"><a class="header-anchor" href="#事件类型" aria-hidden="true">#</a> 事件类型</h2><blockquote><p>click：用户单击主鼠标按钮（一般是左键）或者按下在聚焦时按下回车键时触发</p><p>dblclick：用户双击主鼠标按键触发（频率取决于系统配置）</p><p>mousedown：用户按下鼠标任意按键时触发</p><p>mouseup：用户抬起鼠标任意按键时触发</p><p>mousemove：鼠标在元素上移动时触发</p><p>mouseover：鼠标进入元素时触发</p><p>mouseout：鼠标离开元素时触发</p><p>mouseenter：鼠标进入元素时触发，该事件不会冒泡。html5 方法</p><p>mouseleave：鼠标离开元素时触发，该事件不会冒泡。html5 方法</p><p>contextmenu：</p><p>不需要小驼峰和大驼峰 。</p></blockquote><p><strong>mouseover、mouseout、mouseenter、mouseleave 的区别？</strong></p><ul><li>over 和 out，不考虑子元素，从父元素移动到子元素，对于父元素而言，仍然算作离开</li><li>enter 和 leave，考虑子元素，子元素仍然是父元素的一部分</li><li>mouseenter 和 mouseleave 不会冒泡</li></ul><p><strong>案例：</strong></p><blockquote><p>click=mousedown+mouseup</p><p>这三个事件的触发顺序是 mousedown，mouseup，click。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;onmousedown&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;onmouseup&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 结果为：onmousedown、onmouseup、click</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>button 区分鼠标按键：</strong></p><blockquote><p>只有 mouseup、mousedown 两个能区分鼠标垫左右键。</p><p>button 返回值，右键是 0，左键是 2，中间是 1。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>button <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;right&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>button <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong></p><blockquote><p>DOM3 标准规定:click 事件只能监听左键,只能通过<code>mousedown</code> 和 <code>mouseup </code>来 判断鼠标键。</p><p>click 不能监听右中键。</p></blockquote><p><strong>如何解决 mousedown 和 click 的冲突？</strong></p><blockquote><p>看时间差解决：按下+抬起的时间差 &gt; 多少 ，判断是 click。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> firstTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  firstTime <span class="token operator">=</span> <span class="token function">newDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  last Time <span class="token operator">=</span> <span class="token function">newDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTime <span class="token operator">-</span> firstTime <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    key <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    key <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件对象" tabindex="-1"><a class="header-anchor" href="#事件对象" aria-hidden="true">#</a> 事件对象</h2><p><code>MouseEvent</code></p><ul><li><p>altKey：触发事件时，是否按下了键盘的 alt 键</p></li><li><p>ctrlKey：触发事件时，是否按下了键盘的 ctrl 键</p></li><li><p>shiftKey：触发事件时，是否按下了键盘的 shift 键</p></li><li><p>button：触发事件时，鼠标按键类型</p></li><li><p>0：左键</p></li><li><p>1：中键</p></li><li><p>2：右键</p></li></ul><p><strong>位置：</strong></p><ul><li>page：pageX、pageY，当前鼠标距离页面的横纵坐标</li><li>client: clientX、clientY，鼠标相对于视口的坐标</li><li>offset：offsetX、offsetY，鼠标相对于事件源的内边距的坐标</li><li>screen: screenX、screenY，鼠标相对于屏幕</li><li>x、y，等同于 clientX、clientY</li><li>movement：<code>movementX、movementY</code>，只在鼠标移动事件中有效，相对于上一次鼠标位置，偏移的距离</li></ul><h1 id="键盘事件" tabindex="-1"><a class="header-anchor" href="#键盘事件" aria-hidden="true">#</a> 键盘事件</h1><h2 id="事件类型-1" tabindex="-1"><a class="header-anchor" href="#事件类型-1" aria-hidden="true">#</a> 事件类型</h2><blockquote><p>keydown：按下键盘上任意键触发，如果按住不放，会重复触发此事件</p><p>keypress：按下键盘上一个<strong>字符键</strong>时触发</p><p>keyup：抬起键盘上任意键触发</p><p>keydown、keypress 如果阻止了事件默认行为，文本不会显示。</p><p>触发顺序： keydown &gt; keypress &gt; keyup。</p></blockquote><p><strong>keydown 和 keypress 的区别？</strong></p><blockquote><p>1）keydown 可以响应任意键盘按键，keypress 只可以相应字符类键盘按键 ；keydown 检测字符类不准确，不区分大小写，keypress 检测字符很准，区分大小写。</p><p>用法：如果你想监控字符类按键，并想区分大小写，就用 keypress，如果是操作类按 键的话，就用 keydown（which：39 是给按键牌号 39，不是 asc 码） 。</p><p>2）keypress 返回 ASCII 码，可以转换成相应字符</p></blockquote><h2 id="事件对象-1" tabindex="-1"><a class="header-anchor" href="#事件对象-1" aria-hidden="true">#</a> 事件对象</h2><p><code>KeyboardEvent</code></p><ul><li>code：得到按键字符串，适配键盘布局。</li><li>key：得到按键字符串，不适配键盘布局。能得到打印字符。</li><li>keyCode、which：得到键盘编码</li></ul><p><strong>案例：连续按键。</strong></p><blockquote><p>连续按键盘按键的时候就是连续触发 keydown 和 keypress，松开触发 keyup。</p><p>注意：游戏触发设置在 keydown 上，机械键盘抬起速度快反馈力量大，对游戏没用。</p></blockquote><p><strong>案例：ASCII 码 转换为字符。</strong></p><blockquote><p>把 Unicode 编码转成对应值。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function-variable function">onkeypress</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>charCode <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>charCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 97 a</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="文本操作事件" tabindex="-1"><a class="header-anchor" href="#文本操作事件" aria-hidden="true">#</a> 文本操作事件</h1><p><code>input、select、text等</code></p><blockquote><p>focus：元素聚焦的时候触发（能与用户发生交互的元素，都可以聚焦），该事件不会冒泡</p><p>blur：元素失去焦点时触发，该事件不会冒泡。</p><p>submit：提交表单事件，仅在 form 元素有效。</p><p>change：文本改变事件</p><p>input: 文本改变事件，即时触发</p></blockquote><h1 id="窗体操作类-window-上的事件" tabindex="-1"><a class="header-anchor" href="#窗体操作类-window-上的事件" aria-hidden="true">#</a> 窗体操作类(window 上的事件)</h1><blockquote><p>window 是全局对象。</p><p><code>load、DOMContentLoaded、readystatechange</code> 事件。</p><p>scroll： 当滚动条一滚动，scroll 事件就触发了。</p></blockquote><p><strong>window 的 load：</strong></p><p>页面中所有资源全部加载完毕的事件。</p><p><strong>图片的 load：</strong></p><p>图片资源加载完毕的事件。</p><p>图片、视频、音频 是异步渲染。</p><p><strong>浏览器渲染页面的过程：</strong></p><blockquote><ol><li>得到页面源代码</li><li>创建 document 节点</li><li>从上到下，将元素依次添加到 dom 树中，每添加一个元素，进行预渲染</li><li>按照结构，依次渲染子节点</li></ol></blockquote><p><strong>document 的 DOMContentLoaded:</strong></p><p>dom 树构建完成后触发的事件。</p><p><strong>window 的 readystatechange：</strong></p><blockquote><p>页面状态改变触发。</p><p>**页面的 3 个状态****readystate:** loading、interactive、complete</p><ul><li>loading：加载状态</li><li>interactive：dom 树生成完毕的状态，触发 DOMContentLoaded 事件</li><li>complete：页面加载完成的状态，触发 window 的 load 事件</li></ul></blockquote><p><strong>注意：</strong></p><ul><li>css 应该写到页面顶部：避免出现闪烁（如果放到页面底部，会导致元素先没有样式，使用丑陋的默认样式，然后当读到 css 文件后，重新改变样式）</li><li>js 代码应该尽量写到页面底部，不影响页面渲染</li><li>JS 应该写到页面底部：避免阻塞后续的渲染，也避免运行 JS 时，得不到页面中的元素。</li></ul><p>**案例：**获取图片宽高。</p><blockquote><p>回调函数，图片加载完成后返回图片宽高。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getImgSize</span><span class="token punctuation">(</span><span class="token parameter">img<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>img<span class="token punctuation">.</span>width <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> img<span class="token punctuation">.</span>height <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> img<span class="token punctuation">.</span>width<span class="token punctuation">,</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> img<span class="token punctuation">.</span>height
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">width</span><span class="token operator">:</span> img<span class="token punctuation">.</span>width<span class="token punctuation">,</span>
      <span class="token literal-property property">height</span><span class="token operator">:</span> img<span class="token punctuation">.</span>height
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：IE6fixed 定位</strong></p><blockquote><p>ie6 没 fixed 定位，就用 position 的 top=原来的 top+滚动条的位置来写。</p><p>absolute 定位 相对于文档定位，用 absolute 定位模拟 fixed 定位。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageXOffset <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>load 重要但是不用？</strong></p><blockquote><p><strong>理由：</strong></p><p>html 和 css 是一起解析的，在解析的时候会有 html 有 domTree，css 有 cssTree 生成（树形图的顶底是 document，然后是 html，然后是 head，body），两个树拼在 一起是 renderTree。</p><p><strong>什么时候把节点放在树里？</strong></p><p>dom 节点解析，如确定是 img 标签就把他放到树里。（先解析完 img，同时开启一个线程异步的去下载里面的内容，后下载完）。</p><p>window.onload 要等整个页面解析完，下载完才能操作 js，才能触发事件（效率很差）。</p></blockquote><h2 id="其他事件" tabindex="-1"><a class="header-anchor" href="#其他事件" aria-hidden="true">#</a> 其他事件</h2><p><strong>unload、beforeunload：</strong></p><p>beforeunload: window 的事件，关闭窗口时运行，可以阻止关闭窗口，比 unload 先执行。</p><p>unload：window 的事件，关闭窗口时运行，不可以阻止关闭。</p><p><strong>scroll：</strong></p><p>窗口发生滚动时运行的事件</p><p>通过 scrollTop 和 scrollLeft，可以获取和设置滚动距离。</p><p><strong>resize：</strong></p><p>窗口尺寸发生改变时运行的事件，监听的是视口尺寸</p><p><strong>contextmenu：</strong></p><p>右键菜单事件</p><p><strong>paste：</strong></p><p>粘贴事件</p><p><strong>copy：</strong></p><p>复制事件</p><p><strong>cut：</strong></p><h1 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h1><h2 id="_7-1-元素位置" tabindex="-1"><a class="header-anchor" href="#_7-1-元素位置" aria-hidden="true">#</a> 7.1 元素位置</h2><p><strong>offsetParent：</strong></p><p>获取某个元素第一个定位的祖先元素，如果没有，则得到 body</p><p>body 的 offsetParent 为 null</p><p><strong>offsetLeft、offsetTop：</strong></p><p>相对于该元素的 offsetParent 的坐标</p><p>如果 offsetParent 是 body，则将其当作是整个网页</p><p>**案例：**获得相对于视口的距离</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getPagePosition</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> left <span class="token operator">=</span> dom<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>
  <span class="token keyword">var</span> top <span class="token operator">=</span> dom<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>
  <span class="token keyword">var</span> parent <span class="token operator">=</span> dom<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    left <span class="token operator">+=</span> parent<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>
    top <span class="token operator">+=</span> parent<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>
    parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> left<span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> top
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件模拟" tabindex="-1"><a class="header-anchor" href="#事件模拟" aria-hidden="true">#</a> 事件模拟</h2><p><strong>常用：</strong></p><blockquote><p><code>​click() 、​sumbit()</code>​ 事件加（）表示触发事件。</p></blockquote><p>**dispatchEvent：**事件分发</p><h2 id="其他补充" tabindex="-1"><a class="header-anchor" href="#其他补充" aria-hidden="true">#</a> 其他补充</h2><ul><li>window.scrollX、window.pageXOffset、window.scrollY、window.pageYOffset</li></ul><p>window.scrollX、window.pageXOffset: 相当于根元素的 scrollLeft</p><p>window.scrollY、window.pageYOffset: 相当于根元素的 scrollTop</p><ul><li>scrollTo、scrollBy</li></ul><p>scrollTo: 设置滚动条位置</p><ul><li>resizeTo、resizeBy</li></ul>`,183),u=[l];function r(d,k){return s(),a("div",null,u)}const b=n(i,[["render",r],["__file","10-shijian.html.vue"]]);export{b as default};
