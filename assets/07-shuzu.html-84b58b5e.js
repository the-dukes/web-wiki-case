import{_ as n,o as s,c as a,a as p}from"./app-72013311.js";const t="/web-wiki-case/assets/js7-1-18a961dc.png",e={},o=p(`<h1 id="_07-数组" tabindex="-1"><a class="header-anchor" href="#_07-数组" aria-hidden="true">#</a> 07-数组</h1><h2 id="数组的读和写" tabindex="-1"><a class="header-anchor" href="#数组的读和写" aria-hidden="true">#</a> 数组的读和写</h2><blockquote><p><code>arr[num] ;</code> 不可以溢出读，溢出结果是 undefined。 <code>arr[num] = xxx;</code> 可以溢出写</p></blockquote><h2 id="数组常用的方法" tabindex="-1"><a class="header-anchor" href="#数组常用的方法" aria-hidden="true">#</a> 数组常用的方法</h2><p>ES3.0 的方法。</p><p><strong>改变原数组：</strong></p><blockquote><p>push：返回长度，能添加多位。</p><p>pop：最后一位剪切走，返回剪切值；无参数</p><p>shift：删除第一位</p><p>unshift：在开头添加，能添加多位</p><p>sort：排序。是按<strong>ASCII 码</strong>来排序。</p><p>reverse：翻转</p><p><code>splice（从第几位开始， 截取的长度， 在切口处添加新的数据）</code>。切片方法，第 3 位开始的形参可以不填。</p></blockquote><p><strong>不改变原数组：</strong></p><blockquote><p>concat：连接， 把后面的数组拼到前面，并成立一个新的数组，不影响之前的两个 数组。</p><p>join：参数需要用字符串形式(标准语法规定)，数组会用参数连接起来，返回字符串。</p><p>不传参默认按<code>，</code>连接。</p><p>split：按照参数拆分为数组。</p><p>toString</p><p>slice：截取。</p><p>slice 里面可以填 0 个参数，也可以填 1 个参数，也可以填两个参数。</p><p>1、如果填两个参数，slice(从该位开始截取，截取到该位) 如 arr.slice(1,2)从第一位开始截取，截取到第二位</p><p>2、如果填一个参数，从第几位开始截取，一直截取到最后。</p><p>如果 arr.slice(1) ，从第 1 位开始截取，截取到最后一位</p><p>3、不写参数就是整个截取数组(把类数组转换成数组的时候经常使用到)</p><p>4、克隆数组 <code>var arr1 = arr.slice();</code></p></blockquote><h3 id="push" tabindex="-1"><a class="header-anchor" href="#push" aria-hidden="true">#</a> push</h3><p>案例：</p><blockquote><p>重写 push 方法。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mypush</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>vari <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  returnthis<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort</h3><p><strong>案例：sort</strong></p><blockquote><p>自定义 sort 留下的接口。</p><p>1 必须写两形参</p><p>2 看返回值</p><p>1）当返回值为负数时，那么前面的数放在前面</p><p>2）为正数时，后面的数在前</p><p>3）为 0，不变</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment">// 升序 return b-a ;       // 降序</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：</strong></p><blockquote><p>将一个数组乱序。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-类数组" tabindex="-1"><a class="header-anchor" href="#_5-类数组" aria-hidden="true">#</a> 5 类数组</h2><p>是对象但是可以像数组一样用。</p><p>可以利用属性名模拟数组的特性。</p><p>可以动态的增加 length 属性。</p><p>如果强行让类数组调用 push 方法，则会根据 length 属性值的位置进行属性的扩充。</p><p><strong>类数组的基本形态：</strong></p><blockquote><p>属性要为索引（数字）属性；</p><p>必须要有 length 属性；</p><p>注意：length 值决定，push 的位置。</p><p>最好加上 push ；</p><p>加上 splice 后长的和数组一样；</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token literal-property property">push</span><span class="token operator">:</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push
  <span class="token comment">// splice : Array.prototype.splice</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// push 方法</span>
<span class="token comment">// Array.prototype.push = function(target) { //     obj[obj.length] = target;//     obj.length++;// }console.log(obj);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+`" alt="image.png"></p><p><strong>案例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">push</span><span class="token operator">:</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {2: &quot;c&quot;, 3: &quot;d&quot;, length: 4, push: ƒ}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="数组其他操作" tabindex="-1"><a class="header-anchor" href="#数组其他操作" aria-hidden="true">#</a> 数组其他操作</h1><p><strong>数组清空</strong></p><blockquote><p><code>数组.splice(0, 数组.length)</code>; <code>数组.length = 0</code>;</p></blockquote><p><strong>查找数组中某一项的下标</strong></p><ul><li>数组.indexOf(数据)</li></ul><blockquote><p>从数组中依次查找对应的数据，查找时使用严格相等进行比较。找到第一个匹配的下标，返回。如果没有找到，则得到-1；</p></blockquote><ul><li>数组.lastIndexOf(数据)</li></ul><blockquote><p>功能和 indexOf 类似，只是查找的是最后一个匹配的下标</p></blockquote><p><strong>数组.fill</strong></p><blockquote><p>数组.fill(数据)：将数组的所有项，填充为指定的数据</p></blockquote><blockquote><p>数组.fill(数组, 开始下标): 将数组从开始下标起，到数组的末尾，填充为指定的数据</p></blockquote><blockquote><p>数组.fill(数组, 开始下标，结束下标): 将数组从开始下标起，到数组的结束下标（取不到），填充为指定的数据</p></blockquote><h2 id="语法补充" tabindex="-1"><a class="header-anchor" href="#语法补充" aria-hidden="true">#</a> 语法补充</h2><p><strong>in 关键字：</strong></p><p>判断某个属性名在对象中是否存在</p><blockquote><p>属性名 in 对象</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">324</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&#39;asdfas&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">23</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>for-in foreach 循环：</strong></p><blockquote><p>取出对象的所有属性名，每次循环将其中一个属性名赋值给变量 prop，运行循环体。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//循环体}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>案例：for in 遍历数组</p><blockquote><p>获取不到没有属性的稀松数组。</p></blockquote><h1 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h1><p><strong>静态成员:</strong></p><ul><li><p>keys(某个对象)，得到某个对象的所有属性名数组</p></li><li><p>values(某个对象)，得到某个对象的所有属性值数组</p></li><li><p><code>entries(某个对象)</code>，得到某个对象的所有属性名和属性值的数组</p><p>Object.keys(obj);</p></li></ul><h1 id="array-构造器" tabindex="-1"><a class="header-anchor" href="#array-构造器" aria-hidden="true">#</a> Array 构造器</h1><p>凡是通过 Array 构造函数创建的对象，都是数组</p><h2 id="静态成员" tabindex="-1"><a class="header-anchor" href="#静态成员" aria-hidden="true">#</a> 静态成员</h2><ul><li>from 方法：可以将一个伪数组转换为真数组</li><li>isArray 方法：判断一个给定的数据，是否为一个真数组</li><li>of 方法：类似于中括号创建数组，依次赋予数组每一项的值</li></ul>`,60),c=[o];function l(i,r){return s(),a("div",null,c)}const k=n(e,[["render",l],["__file","07-shuzu.html.vue"]]);export{k as default};
