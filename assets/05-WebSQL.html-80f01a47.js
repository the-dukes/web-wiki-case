import{_ as n,o as s,c as a,a as t}from"./app-b21c52a4.js";const e={},p=t(`<h1 id="websql" tabindex="-1"><a class="header-anchor" href="#websql" aria-hidden="true">#</a> <em>WebSQL</em></h1><p><em>WebSQL</em> 数据库 <em>API</em> 并不是 <em>HTML5</em> 规范的一部分，但是它是一个独立的规范，引入了一组使用 <em>SQL</em> 操作客户端数据库的 <em>APIs</em>。</p><p>如果你之前接触过诸如像 <em>MySQL</em> 这样的关系型数据库，学习过 <em>SQL</em> 语言，那么 <em>WebSQL</em> 对于你来讲没有任何的难度。</p><p>最新版的 <em>Safari, Chrome</em> 和 <em>Opera</em> 浏览器都支持 <em>WebSQL</em>。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-01-015120.png" alt="image-20211130142613099" style="zoom:50%;"><p>在 <em>WebSQL</em> 中，有 <em>3</em> 个核心方法：</p><ul><li><p><em>openDatabase</em>：这个方法使用现有的数据库或者新建的数据库创建一个数据库对象。</p></li><li><p><em>transaction</em>：这个方法让我们能够控制一个事务，以及基于这种情况执行提交或者回滚。</p></li><li><p><em>executeSql</em>：这个方法用于执行实际的 <em>SQL</em> 查询。</p></li></ul><h2 id="打开数据库" tabindex="-1"><a class="header-anchor" href="#打开数据库" aria-hidden="true">#</a> 打开数据库</h2><p>我们可以使用 <em>openDatabase( )</em> 方法来打开已存在的数据库，如果数据库不存在，则会创建一个新的数据库，使用代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token string">&#39;mydb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1.0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test DB&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的代码中，我们尝试打开一个名为 <em>mydb</em> 的数据库，因为第一次不存在此数据库，所以会创建该数据库，版本号为 <em>1.0</em>，大小为 <em>2M</em>。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-01-015135.png" alt="image-20211130142639596" style="zoom:50%;"><p><em>openDatabase( )</em> 方法对应的 <em>5</em> 个参数：</p><ul><li><p>数据库名称</p></li><li><p>版本号</p></li><li><p>描述文本</p></li><li><p>数据库大小</p></li><li><p>创建回调</p></li></ul><p>第 <em>5</em> 个参数，创建回调会在创建数据库后被调用。</p><h2 id="执行操作" tabindex="-1"><a class="header-anchor" href="#执行操作" aria-hidden="true">#</a> 执行操作</h2><p>执行操作使用 <em>database.transaction( )</em> 函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token string">&#39;mydb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1.0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test DB&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;CREATE TABLE IF NOT EXISTS LOGS (id unique, log)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的语句执行后会在 &#39;<em>mydb</em>&#39; 数据库中创建一个名为 <em>LOGS</em> 的表。</p><p>该表存在 <em>2</em> 个字段 <em>id</em> 和 <em>log</em>，其中 <em>id</em> 是唯一的。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-01-015142.png" alt="image-20211130142711069" style="zoom:50%;"><h2 id="插入数据" tabindex="-1"><a class="header-anchor" href="#插入数据" aria-hidden="true">#</a> 插入数据</h2><p>在执行上面的创建表语句后，我们可以插入一些数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token string">&#39;mydb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1.0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test DB&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;CREATE TABLE IF NOT EXISTS STU (id unique, name, age)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO STU (id, name, age) VALUES (1, &quot;张三&quot;, 18)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO STU (id, name, age) VALUES (2, &quot;李四&quot;, 20)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们创建了一张名为 <em>STU</em> 的表，该表存在 <em>3</em> 个字段 <em>id，name</em> 和 <em>age</em>。</p><p>之后我们往这张表中插入了 <em>2</em> 条数据。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-01-15151.png" alt="image-20211130142729393" style="zoom:67%;"><p>我们也可以使用动态值来插入数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> stuName <span class="token operator">=</span> <span class="token string">&#39;谢杰&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> stuAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token string">&#39;mydb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1.0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test DB&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;CREATE TABLE IF NOT EXISTS STU (id unique, name, age)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// tx.executeSql(&#39;INSERT INTO STU (id, name, age) VALUES (1, &quot;张三&quot;, 18)&#39;);</span>
  <span class="token comment">// tx.executeSql(&#39;INSERT INTO STU (id, name, age) VALUES (2, &quot;李四&quot;, 20)&#39;);</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO STU (id, name, age) VALUES (3, ?, ?)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    stuName<span class="token punctuation">,</span>
    stuAge<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们使用动态值的方式插入了一条数据，实例中的 <em>stuName</em> 和 <em>stuAge</em> 是外部变量，<em>executeSql</em> 会映射数组参数中的每个条目给 &quot;?&quot;。</p><blockquote><p>注意：由于上一次操作已经插入了 <em>id</em> 为 <em>1</em> 和 <em>2</em> 的数据，所以这一次插入内容时，要将前面两次插入语句注释调，否则插入操作不会成功。因为这里是一个事务，前面失败了会导致后面也失败。</p></blockquote><h2 id="读取数据" tabindex="-1"><a class="header-anchor" href="#读取数据" aria-hidden="true">#</a> 读取数据</h2><p>以下实例演示了如何读取数据库中已经存在的数据：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> stuName <span class="token operator">=</span> <span class="token string">&#39;谢杰&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> stuAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token comment">// 打开数据库</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token string">&#39;mydb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1.0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Test DB&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 插入数据</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;CREATE TABLE IF NOT EXISTS STU (id unique, name, age)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO STU (id, name, age) VALUES (1, &quot;张三&quot;, 18)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO STU (id, name, age) VALUES (2, &quot;李四&quot;, 20)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO STU (id, name, age) VALUES (3, ?, ?)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    stuName<span class="token punctuation">,</span>
    stuAge<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取操作</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span>
    <span class="token string">&#39;SELECT * FROM STU&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> len <span class="token operator">=</span> results<span class="token punctuation">.</span>rows<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
        i<span class="token punctuation">;</span>
      msg <span class="token operator">=</span> <span class="token string">&#39;&lt;p&gt;查询记录条数: &#39;</span> <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token string">&#39;&lt;/p&gt;&#39;</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#status&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> msg<span class="token punctuation">;</span>

      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        msg <span class="token operator">=</span>
          <span class="token string">&#39;&lt;p&gt;&lt;b&gt;&#39;</span> <span class="token operator">+</span>
          results<span class="token punctuation">.</span>rows<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span>
          <span class="token string">&#39;:&#39;</span> <span class="token operator">+</span>
          results<span class="token punctuation">.</span>rows<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>age <span class="token operator">+</span>
          <span class="token string">&#39;&lt;/b&gt;&lt;/p&gt;&#39;</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#status&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> msg<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，第二个部分是读取数据的操作。这里我们仍然是使用的 <em>executeSql( )</em> 方法来执行的 <em>SQL</em> 命令，但是用法又不一样了。是时候来看一下完整的 <em>executeSql( )</em> 方法是什么样了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">executeSql</span><span class="token punctuation">(</span>sqlStatement<span class="token punctuation">,</span> arguments<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法完整的语法实际上是接收 <em>4</em> 个参数，分别是：</p><ul><li><em>SQL</em> 语句</li><li>参数</li><li>执行 <em>SQL</em> 语句后的回调</li><li>错误回调</li></ul><p>因此在上面的示例中，我们 <em>executeSql( )</em> 的第三个参数就是执行了 <em>SQL</em> 语句后的回调。我们在回调中可以通过 <em>results.rows</em> 拿到该表中的数据，之后对数据进行业务需求的操作即可。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-01-015159.png" alt="image-20211130142755739" style="zoom:50%;"><h2 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据" aria-hidden="true">#</a> 删除数据</h2><p>删除数据也是使用 <em>SQL</em> 中的语法，同样也支持动态指定的方式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> stuID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// 删除操作</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;DELETE FROM STU  WHERE id=1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;DELETE FROM STU WHERE id=?&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>stuID<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们删除了 <em>id</em> 为 <em>1</em> 和 <em>2</em> 的两条数据，其中第二条是动态指定的。</p><h2 id="修改数据" tabindex="-1"><a class="header-anchor" href="#修改数据" aria-hidden="true">#</a> 修改数据</h2><p>要修改数据也是使用 <em>SQL</em> 中的语法，同样也支持动态指定的方式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> stuID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">// 更新操作</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE STU SET name=&#39;王羲之&#39; WHERE id=3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;UPDATE STU SET age=21 WHERE id=?&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>stuID<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们修改了 <em>id</em> 为 <em>3</em> 的学生，名字修改为“王羲之”，年龄修改为 <em>21</em>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>目前来看，<em>WebSQL</em> 已经不再是 <em>W3C</em> 推荐规范，官方也已经不再维护了。原因说的很清楚，当前的 <em>SQL</em> 规范采用 <em>SQLite</em> 的 <em>SQL</em> 方言，而作为一个标准，这是不可接受的。</p><p>另外，<em>WebSQL</em> 使用 <em>SQL</em> 语言来进行操作，更像是一个关系型数据库，而 <em>IndexedDB</em> 则更像是一个 <em>NoSQL</em> 数据库， 这也是目前 <em>W3C</em> 强推的浏览端数据库解决方案。</p><p>所以本文不再对 <em>WebSQL</em> 做过多的介绍。</p><p>如果有兴趣的同学，可以参阅下面的资料进行扩展阅读：</p><ul><li><em>View Web SQL data</em>：<em>https://developer.chrome.com/docs/devtools/storage/websql/?utm_source=devtools#run</em>（需要搭梯子）</li><li><em>CSDN WebSQL</em> 最全详解：<em>https://blog.csdn.net/weixin_45389633/article/details/107308968</em></li></ul><hr><p>-<em>EOF</em>-</p>`,57),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","05-WebSQL.html.vue"]]);export{r as default};
