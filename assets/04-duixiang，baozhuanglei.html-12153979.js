import{_ as n,o as s,c as a,a as t}from"./app-d6eaa58c.js";const e={},p=t(`<h1 id="_04-对象" tabindex="-1"><a class="header-anchor" href="#_04-对象" aria-hidden="true">#</a> 04-对象</h1><h2 id="对象的创建方法" tabindex="-1"><a class="header-anchor" href="#对象的创建方法" aria-hidden="true">#</a> 对象的创建方法</h2><p><strong>创建方法：</strong></p><ul><li><code>var obj = {}</code> 对象字面量/对象直接量</li><li>构造函数</li></ul><p>系统自带的构造函数：<code>Object();Array();Number();Boolean();Date();</code></p><p>自定义的构造函数。</p><p>系统自带的构造函数 Object()可以批量生成对象，每一个对象都一样，但是彼此相互 独立。</p><p>在 Object()前面加个 new，变成 new Object()的执行，就会真正的返回一个对象，通 过 return 返回，拿变量接受<code>var obj = new Object(); </code>。</p><p><code>var obj = new Object();和 var obj = {};</code>这样写区别不大。</p><p>必须用 new 这个操作符，才能构造出对象 <strong>构造函数必须要按照大驼峰式命名规则</strong>。</p><p><strong>构造函数内部原理？</strong></p><blockquote><p>前提必须要加 new，以下三步都是隐式的：</p><p>1.在函数体最前面隐式的加上 var this = {} 空对象</p><p>2.执行 this.xxx = xxx;</p><p>3.隐式的返回 return this</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> height</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//隐式的 var this = {}，下面正常执行 this</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token operator">=</span>height<span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>say<span class="token operator">=</span><span class="token function">funtion</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//此处的 this 和外面的 this 不同</span>
<span class="token punctuation">}</span>
<span class="token comment">// 隐式的 return this;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="包装类" tabindex="-1"><a class="header-anchor" href="#包装类" aria-hidden="true">#</a> 包装类</h2><p>原始值不能有属性和方法 。</p><p>属性和方法只有对象有，包括<strong>对象自己，数组，function</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Nunber</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数字类型对象</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>‘abcd’<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字符串类型对象</span>
<span class="token keyword">var</span> bol<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>‘<span class="token boolean">true</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//布尔类型对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例：原始值不可能有属性和方法，但经过了**包装类(加隐式)**可以调用一些属性与方法</p><blockquote><p>这些隐式的过程就是包装类。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">4</span>；
num<span class="token punctuation">.</span>len<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">//系统隐式的加上 new Number(4).len = 3; 然后 deleteconsole.log(num.len);</span>
<span class="token comment">//系统隐式的加上 new Number(4).len; 但是这个 new number 和上面的 new number不是同一个，所以返回undefined</span>

<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">;</span>
  str<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">//隐式的加上 new string(&#39;abcd&#39;).length = 2;然后 delete</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// abcd</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong></p><p>undefined 和 null 不可以有属性。</p><h1 id="原始类型包装器" tabindex="-1"><a class="header-anchor" href="#原始类型包装器" aria-hidden="true">#</a> 原始类型包装器</h1><h1 id="原始类型包装器-1" tabindex="-1"><a class="header-anchor" href="#原始类型包装器-1" aria-hidden="true">#</a> 原始类型包装器</h1><blockquote><p><code>new 包装器(值)</code>：返回的是一个对象</p></blockquote><blockquote><p><code>包装器(值)</code>：返回的是一个原始类型</p></blockquote><h2 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h2><h3 id="静态成员" tabindex="-1"><a class="header-anchor" href="#静态成员" aria-hidden="true">#</a> 静态成员</h3><ul><li><p>isNaN</p></li><li><p>isFinite</p></li><li><p>isInteger：判断一个数据是否是整数</p></li><li><p>parseFloat: 将一个数据转换为小数</p></li><li><p>parseInt：将以一个数据转换为整数，直接舍去小数部分</p></li></ul><h3 id="实例成员" tabindex="-1"><a class="header-anchor" href="#实例成员" aria-hidden="true">#</a> 实例成员</h3><ul><li><p>toFixed 方法：会有四舍五入</p></li><li><p>toPrecision：以指定的精度返回一个数字字符串</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h2><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><h3 id="静态成员-1" tabindex="-1"><a class="header-anchor" href="#静态成员-1" aria-hidden="true">#</a> 静态成员</h3><ul><li>fromCharCode：通过 unicode 编码创建字符串</li></ul><h3 id="实例成员-1" tabindex="-1"><a class="header-anchor" href="#实例成员-1" aria-hidden="true">#</a> 实例成员</h3><ul><li>length：字符串长度</li></ul><p>字符串是一个伪数组。</p><ul><li><p>charAt：得到指定位置的字符</p></li><li><p>charCodeAt：得到指定位置字符的编码</p></li><li><p>concat：连接字符串，返回新的字符串</p></li><li><p>includes：是否包含其他字符串</p></li><li><p>endsWith：</p></li><li><p>startsWith：</p></li><li><p>indexOf：找到某个字符的索引，没找到返回-1</p></li><li><p>lastIndexOf：最后一次出现的索引</p></li><li><p>padStart：在字符串的开头填充到指定长度</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> hour <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  minute <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>
  second <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment">// 02:08:20</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hour<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>minute
    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>second<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>padEnd：在符串的末尾填充到指定长度</p></li><li><p>repeat：返回重复次数的字符串</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;abb&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abbabbabb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>slice：从某个位置取到某个位置；位置可以是负数；</p></li><li><p>substr: 从某个位置开始取，取指定的长度；位置可以是负数；</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>substring：从某个位置取到某个位置；不可以是负数（负数会自动转换为 0）；参数位置是可调换的。</p><p>substring(start, end); // end 小于 start ，会自动的调换位置。</p></li><li><p>toLowerCase</p></li><li><p>toUpperCase</p></li><li><p>split：分割字符串,返回数组</p></li><li><p>trim trimStart trimEnd trimLeft trimRight</p></li></ul>`,46),o=[p];function i(c,l){return s(),a("div",null,o)}const r=n(e,[["render",i],["__file","04-duixiang，baozhuanglei.html.vue"]]);export{r as default};
