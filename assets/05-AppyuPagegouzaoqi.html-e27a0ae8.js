import{_ as a,o as n,c as s,a as p}from"./app-0e5daedb.js";const t={},e=p(`<h1 id="_05-app-与-page-构造器" tabindex="-1"><a class="header-anchor" href="#_05-app-与-page-构造器" aria-hidden="true">#</a> 05-App 与 Page 构造器</h1><h2 id="app-构造器" tabindex="-1"><a class="header-anchor" href="#app-构造器" aria-hidden="true">#</a> App 构造器</h2><p>App 构造器位于 app.js 里面，整个应用只有这一个</p><p><strong>生命周期钩子函数</strong></p><p>如果你有 vue 或者 react 的开发经验，那么生命周期钩子函数也是非常熟悉的。所谓生命周期钩子函数，就是在一些固定的时间点自动触发的函数。</p><p>在 App 构造器中，我们能够书写的生命周期钩子函数如下：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-01-11-053925.png" alt="image-20230111133925087" style="zoom:50%;"><p>什么叫做进入后台状态？</p><p>用户点击右上角的关闭按钮，或者按手机设备的 Home 键离开小程序，此时小程序并没有被销毁，这种情况称为“小程序进入后台状态”。</p><p>注意，onLaunch、onShow 这两个生命周期钩子函数是接收一个参数的。</p><p>因为打开小程序的方式多种多样，有些时候，我们需要根据不同的打开方式，做一些不同的业务处理。</p><p>示例如下：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-01-11-054913.png" alt="image-20230111134912620" style="zoom:50%;"><p><strong>获取全局数据</strong></p><p>在微信小程序中，我们有些时候需要不同的页面共享一些公共的数据。</p><p>在诸如 vue、react 这种框架中，有专门的状态处理库，在微信小程序中，通过的是 globalData 来共享数据。</p><p>globalData 位于 App 构造器中，如下图：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-01-11-055223.png" alt="image-20230111135222913" style="zoom:50%;"><p>其他页面如何获取公共的数据？</p><p>非常简单，在各个页面的 js 文件中，通过 getApp 函数首先获取到 App 的实例，之后访问该实例的 globalData 数据即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;globalData: &#39;</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有一点一定要注意，虽然在小程序中有多个页面，但是多个页面的 JS 跑在一个线程中，这也就意味着假设你在当前页面设置了定时器，从一个页面跳到另外一个页面，之前所设置的计时器并不会被清除掉。所以需要我们在离开页面的时候手动的来清理掉这些计时器。</p><p>另外还有一点，虽然我们通过 getApp 能够获取到 App 的实例，但是一般仅仅是拿来获取 globalData，不要去主动调用生命周期钩子函数，生命周期钩子函数应当是在对应的时间点主动触发的。</p><h2 id="page-构造器" tabindex="-1"><a class="header-anchor" href="#page-构造器" aria-hidden="true">#</a> Page 构造器</h2><p>Page 构造器位于每个页面的 JS 下面。</p><p>我们之前实际上已经接触过一个 Page 构造器的配置项，那就是 data。通过配置 data 里面的数据，可以指定在页面中渲染一些动态的数据。</p><p><strong>生命周期钩子函数</strong></p><p>Page 除了配置 data 配置项以外，还以配置相应的生命周期钩子函数。</p><p>能够配置的选项如下表：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-01-11-060519.png" alt="image-20230111140518750" style="zoom:50%;"><ul><li>onLoad：页面销毁之前会调用一次，当前页面已经加载好了</li><li>onShow：每次当前页面被显示的时候会调用</li><li>onReady：页面销毁之前会调用一次，表示当前页面已经渲染完毕</li></ul><p>什么算是页面销毁？或者说什么时候页面会被销毁？</p><p>当前页面使用 wx.redirectTo 或 wx.navigateBack 返回到其他页时，当前页面会被微信客户端销毁回收</p><p>和 App 构造器中的生命周期钩子函数相同，不要去主动调用，而是应该在对应的时间点自动触发。总之你记住，只要是生命周期钩子函数，都应该是自动的触发，而不应该去手动的调用。</p><p>关于参数的传递</p><p>在进行页面跳转的时候，往往存在一种情况，就是当前页面需要传递一个 id 给新的页面，新的页面就根据当前这个 id 显示详情信息。</p><p>在跳转的时候，可以通过如下的方式来进行跳转：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>wx<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/pages/detail/detail?id=1&amp;other=abc&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实际上就和我们 GET 请求传参是一样的。</p><p>接下来的问题就是新的页面如何拿到这个参数？</p><p>在 onLoad 生命周期钩子中，可以接收一个参数，通过该参数就能够拿到前一个页面传递过来的参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>data 中配置数据</strong></p><p>最后就是关于设置 Page 构造器中 data 里面数据的问题，通过 this.setData 来进行设置。该方法接收两个参数，一个是新的数据，另一个是页面随着数据更新重新渲染后的回调函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">editTestHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">test</span> <span class="token operator">:</span> <span class="token string">&quot;aaaaaa&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;修改完毕，页面已经更新了&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置的时候，只需要设置更新的数据即可。</p><p>同时还有如下的注意点：</p><ol><li>直接修改 Page 实例的 this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致。</li><li>由于 setData 是需要两个线程的一些通信消耗，为了提高性能，每次设置的数据不应超过 1024kB。</li><li>不要把 data 中的任意一项的 value 设为 undefined，否则可能会有引起一些不可预料的 bug。</li></ol><p>本节课结束，下来请通读官方文档对应部分：<em>https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0004eec99acc808b00861a5bd5280a</em></p>`,49),o=[e];function c(i,l){return n(),s("div",null,o)}const d=a(t,[["render",c],["__file","05-AppyuPagegouzaoqi.html.vue"]]);export{d as default};
