import{_ as t,r as i,o as l,c as o,b as s,d as e,e as p,a as n}from"./app-bb81f29b.js";const r={},c=n(`<h1 id="_02-组件" tabindex="-1"><a class="header-anchor" href="#_02-组件" aria-hidden="true">#</a> 02-组件</h1><h2 id="基础组件串烧" tabindex="-1"><a class="header-anchor" href="#基础组件串烧" aria-hidden="true">#</a> 基础组件串烧</h2><p><strong>view</strong></p><p>相当于浏览器中的 div，这边主要说一下关于布局。</p><p>在微信小程序中，布局推荐使用的就是 flex 布局。</p><p>在 view 组件中，有一个 hover-class，可以设置手指按下去的时候的样式</p><p><strong>scroll-view</strong></p><p>这个是可以设置滚动的区域，可以设置横向滚动以及纵向滚动。</p><p>主要通过 scroll-x 以及 scroll-y 这两个属性来设置</p><div class="language-wxml line-numbers-mode" data-ext="wxml"><pre class="language-wxml"><code>&lt;scroll-view class=&quot;container2&quot; scroll-x&gt;
  &lt;view class=&quot;scrollItem&quot; style=&quot;background-color: lightsalmon;&quot;&gt;1&lt;/view&gt;
  &lt;view class=&quot;scrollItem&quot; style=&quot;background-color: lightseagreen;&quot;&gt;2&lt;/view&gt;
  &lt;view class=&quot;scrollItem&quot; style=&quot;background-color: lightblue;&quot;&gt;3&lt;/view&gt;
  &lt;view class=&quot;scrollItem&quot; style=&quot;background-color: pink;&quot;&gt;4&lt;/view&gt;
&lt;/scroll-view&gt;

&lt;view class=&quot;title&quot;&gt;纵向滚动示例&lt;/view&gt;
&lt;scroll-view class=&quot;container3&quot; scroll-y&gt;
  &lt;view class=&quot;scrollItem&quot; style=&quot;background-color: lightsalmon;&quot;&gt;1&lt;/view&gt;
  &lt;view class=&quot;scrollItem&quot; style=&quot;background-color: lightseagreen;&quot;&gt;2&lt;/view&gt;
  &lt;view class=&quot;scrollItem&quot; style=&quot;background-color: lightblue;&quot;&gt;3&lt;/view&gt;
  &lt;view class=&quot;scrollItem&quot; style=&quot;background-color: pink;&quot;&gt;4&lt;/view&gt;
&lt;/scroll-view&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>text</strong></p><p>相当于是浏览器中的 span，可以横向的嵌套，设置某一段文字单独的样式</p><p><strong>image</strong></p><p>该组件用来设置图片。需要说明的是，因为小程序对程序的大小有要求。</p><p>在我们的项目中，一般我们自己写的代码不会太大，一般比较大的就是静态资源。</p><p>所以在小程序中，一般静态资源采用远程加载的方式。</p><p><strong>button</strong></p><p>按钮严格来讲，是属于表单组件，但是在平时开发中，哪怕没用到表单，按钮还是用得很多的。</p><p>详细的属性请参阅官方文档</p><p><strong>navigator</strong></p><p>该组件是一个导航组件。我们前面在进行路由跳转的时候，使用的是 API 的方式进行的跳转。</p><p>除了使用 API 的方式以外，还可以使用 navigator 组件进行跳转。</p><p><strong>icon</strong></p><p>微信小程序官方组件库提供了一些 icon，但是并不多，所以一般我们会用到第三方库或者 iconfont</p><p><strong>富文本</strong></p><p>在富文本输入框中，支持你填写 html 结构的字符串，回头在富文本输入框中会将这些 html 结构的字符串渲染为 wxml</p><h2 id="自定义组件" tabindex="-1"><a class="header-anchor" href="#自定义组件" aria-hidden="true">#</a> 自定义组件</h2><h3 id="介绍和组件模板" tabindex="-1"><a class="header-anchor" href="#介绍和组件模板" aria-hidden="true">#</a> 介绍和组件模板</h3><p>关于自定义组件：https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/</p><p>在使用自定义组件的时候，首先需要注意版本问题，基础库要大于等于 1.6.3</p><p>在使用自定义组件的时候，一般单独拿一个目录来存放自定义组件，一般是 components</p><p>页面中在使用自定义组件时，需要在在 json 文件中进行一个配置，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;usingComponents&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;item&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;/components/item/item&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同于页面对应的 JS 文件中的 Page 构造器，在自定义组件中，对应的 JS 文件的构造器为 Component</p><ul><li>properties：在使用自定义组件时，父组件传入的属性</li><li>data：表示该自定义组件自身的数据</li><li>methods：书写对应的事件处理函数</li><li>options: 关于自定义组件的选项配置，例如我们要使用多插槽的时候，就需要配置 multipleSlots 为 true</li><li>externalClasses：用于指定外部传入的样式类</li></ul><p>从开发者工具 1.02.1810190 及以上版本开始，可以在 app.json 中使用 usingComponents 来注册组件，在 app.json 中所注册的组件被视为全局组件，各个页面，以及其他自定义组件中都可以使用。</p><p>在设计自定义组件的时候，是可以添加插槽，插槽的用法和 Vue 是非常类似的。</p><p>并且和 Vue 中的插槽一样，可以设置具名插槽</p><p>定义插槽：</p><div class="language-wxml line-numbers-mode" data-ext="wxml"><pre class="language-wxml"><code>&lt;view class=&quot;container&quot;&gt;
  &lt;view bindtap=&quot;tapHandle&quot;&gt;{{name}}&lt;/view&gt;
  &lt;slot name=&quot;before&quot;&gt;&lt;/slot&gt;
  &lt;view&gt;{{content}}&lt;/view&gt;
  &lt;slot&gt;&lt;/slot&gt;
  &lt;view&gt;计数器：{{count}}&lt;/view&gt;
  &lt;slot name=&quot;after&quot;&gt;&lt;/slot&gt;
&lt;/view&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用自定义组件时，就可以往插槽插入动态的内容</p><div class="language-wxml line-numbers-mode" data-ext="wxml"><pre class="language-wxml"><code>&lt;view class=&quot;container&quot;&gt;
  &lt;view bindtap=&quot;tapHandle&quot;&gt;index&lt;/view&gt;
  &lt;item content=&quot;传入的内容&quot; count=&quot;{{count}}&quot; class=&quot;my-class&quot;&gt;&lt;/item&gt;
  &lt;item count=&quot;{{count}}&quot;&gt;
    &lt;view slot=&quot;before&quot;&gt;这部分内容会被放入到before&lt;/view&gt;
    &lt;view slot=&quot;after&quot;&gt;这部分内容会被放入到after&lt;/view&gt;
    &lt;view&gt;这部分内容会被放入到默认插槽&lt;/view&gt;
  &lt;/item&gt;
&lt;/view&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="component-构造器" tabindex="-1"><a class="header-anchor" href="#component-构造器" aria-hidden="true">#</a> Component 构造器</h3><ul><li>App：整个小程序的构造器</li><li>Page：页面对应的构造器</li><li>Component：自定义组件构造器 <ul><li>properties：在使用自定义组件时，父组件传入的属性</li><li>data：表示该自定义组件自身的数据</li><li>methods：书写对应的事件处理函数</li><li>options: 关于自定义组件的选项配置，例如我们要使用多插槽的时候，就需要配置 multipleSlots 为 true</li><li>externalClasses：用于指定外部传入的样式类</li><li>lifetimes：生命周期钩子函数，早期的时候，生命周期钩子函数和 Page、App 一样，直接写在配置对象里面，但是后面随着版本的更新，现在推荐写在 lifetimes 配置对象里面，并且写在 lifetimes 里面的优先级是最高的。</li><li>pageLifetimes：组件所在页面的生命周期</li></ul></li></ul><p><strong>实际上，页面也可以被当作是一个自定义组件来使用。</strong></p><p>组件之间涉及到数据的传递，和 Vue 是相似的，父传子通过 properties，子传父通过触发父组件的自定义事件来传递，注意在触发父组件的自定义事件时，使用的是 this.triggerEvent 来进行触发的。</p><p>可以通过 this.selectComponent(&#39;自定义组件的样式类&#39;) 来获取自定义组件实例对象</p><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><p>在自定义组件中，提供了</p><ul><li>created：组件实例刚刚被创建好时，**此时还不能调用 <code>setData</code> 。**通常情况下，这个生命周期只应该用于给组件 <code>this</code> 添加一些自定义属性字段。有点类似于 Vue 里面的 created</li><li>attached：在组件完全初始化完毕、进入页面节点树后， <code>attached</code> 生命周期被触发，这个生命周期很有用，绝大多数初始化工作可以在这个时机进行。有点类似于 Vue 里面的 mounted</li><li>detached：在组件离开页面节点树后触发，类似于 Vue 里面的 destory</li></ul><h3 id="behaviors" tabindex="-1"><a class="header-anchor" href="#behaviors" aria-hidden="true">#</a> behaviors</h3><p>这个就类似于 Vue 里面的 mixin，用来提取组件公共的部分（data、method、生命周期钩子）</p><p>当我们要定义一个 behavior 的时候，需要用到 Behavior 构造器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Behavior</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件间关系" tabindex="-1"><a class="header-anchor" href="#组件间关系" aria-hidden="true">#</a> 组件间关系</h3><p>在使用自定义组件的时候，可以使用 relations 字段来指定自定义组件之间的关系，指定了关系之后，就可以获取到对应组件的实例。</p><p>在使用 relations 的时候，必须两个关联的组件都要加入此字段。</p><p>组件间使用 relations 设定了相互关系后，最大的好处在于能够和关联的组件进行通信，如何通信的？</p><p>主要就是拿到关联组件的实例对象，实例对象一拿到，data 这些数据也就拿到了.</p><h3 id="数据监听器" tabindex="-1"><a class="header-anchor" href="#数据监听器" aria-hidden="true">#</a> 数据监听器</h3>`,60),d={href:"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html",target:"_blank",rel:"noopener noreferrer"},u=n(`<p>这个实际上就和 Vue 里面的 watch 是类似的。</p><h3 id="纯数据字段" tabindex="-1"><a class="header-anchor" href="#纯数据字段" aria-hidden="true">#</a> 纯数据字段</h3><p>在 data 里面所定义的数据，一般来讲在页面是会重新渲染的。如果有一些数据，既不会展示在界面上，也不会传递给其他组件，仅仅是拿来做数据计算的，那么这个时候如果定义在 data 中，就会参与页面重新渲染。但是我们不需要这些字段（纯数据字段）发生改变时页面重新渲染，因此在微信小程序中，提供了一种机制。</p><ol><li>首先，在 Component 中的 options 中书写一个正则</li><li>在 data 中所定义的数据如果能够匹配上该正则，该数据字段就是一个纯数据字段</li><li>纯数据字段值发生变化时，不会引起页面的重新渲染</li></ol><h3 id="抽象节点" tabindex="-1"><a class="header-anchor" href="#抽象节点" aria-hidden="true">#</a> 抽象节点</h3><p>这个就类似于 react 的 renderProps，抽象节点的核心就是在使用自定义组件时，可以将另一个组件以 props 的形式传递到该自定义组件中。因此传递的是什么组件，最终渲染的就是什么组件。</p><p>首先第一步，我们在使用自定义组件的时候，可以将另外的自定义组件像 props 一样传入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>item4 generic<span class="token operator">:</span>selectable<span class="token operator">=</span><span class="token string">&quot;sel1&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>item4 generic<span class="token operator">:</span>selectable<span class="token operator">=</span><span class="token string">&quot;sel2&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们使用了 item4 这个自定义组件，然后我们还分别将 sel1 和 sel2 作为 props 传入到了 item4 里面。</p><p>注意这里需要在对应的 json 文件中注册 sel1、sel2、item4 这几个组件。</p><p>接下来在 item4 这个自定义组件中，书写 selectable 来渲染传入的自定义组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;container&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>item4<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>该示例演示了抽象节点<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>selectable <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，在接受渲染组件的自定义组件中（item4）的 json 文件中，需要开启 selectable</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;componentGenerics&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;selectable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这玩意儿和插槽非常类似？</p><p>这个抽象节点和 react 的 renderProps 非常相似，主要作用是用来横向抽离公共的逻辑，因为我们是传入的一个组件，组件里面是一套完整的功能。回头我们可以将一些公共的业务逻辑（视图、数据、行为）单独的以组件的形式抽离出来。</p><h2 id="使用第三方组件库" tabindex="-1"><a class="header-anchor" href="#使用第三方组件库" aria-hidden="true">#</a> 使用第三方组件库</h2><p>微信小程序的组件库也是非常丰富的，比较有名的：</p><ul><li><p>iView：https://weapp.iviewui.com/</p></li><li><p>vant：https://vant-contrib.gitee.io/vant-weapp/#/home</p></li></ul><blockquote><p>微信官方也提供了一套官方的组件，叫做 WeUI，但是风格基本上就和微信非常相似</p></blockquote><h3 id="vant-使用示例" tabindex="-1"><a class="header-anchor" href="#vant-使用示例" aria-hidden="true">#</a> vant 使用示例</h3><p>首先第一步需要安装</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i @vant<span class="token operator">/</span>weapp <span class="token operator">-</span><span class="token constant">S</span> <span class="token operator">--</span>production
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是在安装之前，需要先使用 npm init -y 初始化一下整个项目</p><p>第二步去掉 app.json 里面的 &quot;style&quot;: &quot;v2&quot;，否则可能会出现样式混乱</p><p>新版的微信开发者工具不需要修改 project.config.json，所以我们直接进入到第四步，点击【工具】下面的【构建 npm】，完成构建</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-02-02-011459.png" alt="image-20230202091459194" style="zoom:50%;"><p>构建成功之后，根目录下面会生成 miniprogram_npm 目录</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-02-02-011642.png" alt="image-20230202091642411" style="zoom:50%;"><p>使用组件时，需要现在页面的 json 中进行配置，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;usingComponents&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;van-button&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@vant/weapp/button/index&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31);function v(m,g){const a=i("ExternalLinkIcon");return l(),o("div",null,[c,s("p",null,[e("数据监听器可以用于监听和响应任何属性和数据字段的变化。从小程序基础库版本 "),s("a",d,[e("2.6.1"),p(a)]),e(" 开始支持。")]),u])}const b=t(r,[["render",v],["__file","index.html.vue"]]);export{b as default};
