import{_ as e,o,c as s,a as c}from"./app-bb81f29b.js";const a={},n=c(`<h1 id="_03-wxss-编译与适配" tabindex="-1"><a class="header-anchor" href="#_03-wxss-编译与适配" aria-hidden="true">#</a> 03-WXSS 编译与适配</h1><p>在前面我们有讲过，微信小程序的本质是一个 Hybrid 应用，在 App 组件中有一个 WebView 的组件可以用来显示网页。</p><p>而如果你把浏览器想象成两部分，那么一部分是 <em>UI</em>（地址栏，导航栏按钮等），其它部分是把标记跟代码转换成我们可见和可交互视图的浏览器引擎。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-02-22-035102.png" alt="image-20220222115102001"></p><p><em>WebView</em> 就是浏览器引擎部分，你可以像插入 <em>iframe</em> 一样将 <em>Webview</em> 插入到你的原生应用中，并且编程化的告诉它将会加载什么网页内容。这样我们可以用它来作为我们原生 <em>app</em> 的视觉部分。当你使用原生应用时，<em>WebView</em> 可能只是被隐藏在普通的原生 <em>UI</em> 元素中，你甚至用不到注意到它。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-02-22-035122.png" alt="image-20220222115121519" style="zoom:50%;"><p>明确了这一点之后，那么我们可以知道，最终微信小程序中的 <code>WXML</code> 以及 <code>WXSS</code> 还是离不开原生的 <code>HTML、CSS</code></p><p>有关 <code>WXML</code> 之前我们已经看过了，实际上就是使用的类似 <code>WebComponents</code> 来自定义的组件。</p><p>那么 <code>WXSS</code> 呢？</p><p><code>WXSS</code>并不可以直接执行在<code>webview</code>层进行渲染，而是通过了一层编译。我们接下来就带大家编译一个<code>WXSS</code>看一下。</p><p>编译的工具名字叫<code>WCSC</code>，这个编译的过程是在微信开发者工具端执行的，那么这个编译工具在哪呢，我们来找一下。在微信开发者工具的控制台界面，输入<code>help()</code>命令可见如所示界面。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-02-15-061015.png" alt="image-20230215141015364"></p><blockquote><p>如果 help( )函数执行后无效果或者抛错，请检查控制台下方位置是否为 top 选项卡。</p></blockquote><p>可以看到这里有一些命令。我们继续在控制台执行第八条<code>openVendor()</code>命令。</p><p>这时候弹出了一个名为<code>WeappVendor</code>的文件夹。在我截图的这个顺序里，可以看到最后一个文件名称正是我们要寻找的<code>WCSC</code>。文件种类是可执行文件。<code>WXSS</code>正是用这个工具来编译的。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-02-15-061123.png" alt="image-20230215141122926" style="zoom:50%;"><p>我们找到了<code>WCSC</code>编译工具后，把这个工具复制到项目的<code>pages/index</code>目录下，与<code>index.wxss</code>同目录。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-02-15-061202.png" alt="image-20230215141202360" style="zoom:50%;"><p>把终端目录打开到<code>pages/index</code>目录中。执行：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token operator">/</span>wcsc <span class="token operator">-</span>js index<span class="token punctuation">.</span>wxss <span class="token operator">&gt;&gt;</span> wxss<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时候可以看到目录中多了一个<code>wxss.js</code>文件。</p><p><code>wxss.js</code>文件就是<code>WXSS</code>文件编译后的文件，<code>index.wxss</code>文件会先通过<code>WCSC</code>可执行程序文件编译成<code>js</code>文件。并不是直接编译成<code>css</code>文件。</p><p>那么我们直接看一下内部代码是怎样的呢。</p><p>这里我拆成了三部分来看，三部分加一起就是完整的代码。第一部分：<code>设备信息</code>。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-02-15-061435.png" alt="image-20230215141434913"></p><p>这个部分用于获取一套基本设备信息，包含<code>设备高度</code>、<code>设备宽度</code>、<code>物理像素与CSS像素比例</code>、<code>设备方向</code>。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-02-15-061503.png" alt="image-20230215141502522"></p><p>这里就是<code>rpx转化</code>的方法了，<code>rpx转化</code>的具体算法就是中间那两句，并且做了一个精度收拢的优化。把那两句单独提取出来再看一下，平常在开发中自己写一个这样的方法也是一种不错的选择。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>number <span class="token operator">=</span> <span class="token punctuation">(</span>number <span class="token operator">/</span> <span class="token constant">BASE_DEVICE_WIDTH</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>newDeviceWidth <span class="token operator">||</span> deviceWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
number <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>number <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2023-02-15-061653.png" alt="image-20230215141653173" style="zoom:67%;"><p>最后这一段代码比较长，看到方法名称我们就可以猜到这个函数是干嘛用的了<code>setCssToHead</code>。</p><p>首先看到最下方执行<code>setCssToHead</code>方法时候的传入参数。隐约可以看出来是我们在<code>index.wxss</code>之中写入的样式。但是仔细一看，格式不太一样了，变成了结构化数据，方便遍历处理，并且处理后便于<code>makeup</code>组装。还哪里不一样了呢，可以看到其中在<code>index.wxss</code>中写<code>rpx</code>单位的属性都变成了区间的样子<code>[0, 128]</code>、<code>[0, 20]</code>。其他单位并没有转换。这样的话就可以方便的识别哪里写了<code>rpx</code>单位，然后执行第二部分的<code>transformRPX</code>方法即可。</p><p><code>makeup</code>组装之后，创建<code>&lt;style&gt;</code>标记，插入到<code>&lt;head&gt;</code>中。</p><p>这就是整个 <code>WXSS</code> 编译后得到的结果，编译后的 <code>JS</code> 代码是通过<code>eval</code>方法注入执行，这样的话完成了<code>WXSS</code>的一整套流程。</p><hr><p>-<em>EOF</em>-</p>`,36),p=[n];function d(t,i){return o(),s("div",null,p)}const l=e(a,[["render",d],["__file","03-WXSSbianyiyushipei.html.vue"]]);export{l as default};
