import{_ as n,o as s,c as a,a as t}from"./app-72013311.js";const p="/web-wiki-case/assets/js5-1-9384e775.png",o="/web-wiki-case/assets/js5-2-d19a04bd.png",e="/web-wiki-case/assets/js5-3-499a9167.png",c="/web-wiki-case/assets/js5-4-09c6a493.png",i="/web-wiki-case/assets/js5-5-7e39c939.png",l={},u=t('<h1 id="_05-原型、原型链" tabindex="-1"><a class="header-anchor" href="#_05-原型、原型链" aria-hidden="true">#</a> 05-原型、原型链</h1><h2 id="原型和原型链" tabindex="-1"><a class="header-anchor" href="#原型和原型链" aria-hidden="true">#</a> 原型和原型链</h2><ul><li><p>所有对象都是通过<code>new 函数</code>创建</p></li><li><p>所有的函数也是对象</p></li></ul><p>通过<code>new Funciton() </code>产生，函数中可以有属性。</p><p><strong>特殊：</strong> JS 引擎启动的时候，直接将 <code>Function函数</code> 放到内存中。</p><p><img src="'+p+'" alt=""></p><h3 id="原型-prototype" tabindex="-1"><a class="header-anchor" href="#原型-prototype" aria-hidden="true">#</a> 原型 prototype</h3><ul><li><p>所有函数都有一个属性：prototype，称之为函数原型</p></li><li><p>默认情况下，prototype 是一个普通的 Object 对象</p></li><li><p>默认情况下，prototype 中有一个属性，constructor，它也是一个对象，它指向构造函数本身。</p></li></ul><p><img src="'+o+`" alt=""></p><pre><code>test.prototype.constructor === test   // true
Object.prototype.constructor === Object  // true
</code></pre><p><strong>注意：</strong></p><p>普通对象没有 prototype。</p><pre><code>var obj = {name: &#39;DUDU&#39;};
obj.prototype			// undefined
</code></pre><h3 id="隐式原型-proto" tabindex="-1"><a class="header-anchor" href="#隐式原型-proto" aria-hidden="true">#</a> 隐式原型 <code>__proto__</code></h3><p>所有的对象都有一个属性：<code>__proto__</code>，称之为隐式原型</p><p>默认情况下，隐式原型指向创建该对象的函数原型。</p><p>当访问一个对象的成员时：</p><ol><li>看该对象自身是否拥有该成员，如果有直接使用</li><li>在原型链中依次查找是否拥有该成员，如果有直接使用</li></ol><p>猴子补丁：在函数原型中加入成员，以增强起对象的功能，猴子补丁会导致原型污染，使用需谨慎。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj: test {}</span>

obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> test<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链" aria-hidden="true">#</a> 原型链</h3><p><strong>特殊点：</strong></p><ol><li>Function 的<code>__proto__</code>指向自身的 prototype</li><li>Object 的 prototype 的 <code>__proto__</code>指向 null</li></ol><p><img src="`+e+`" alt=""></p><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">F</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 函数原型上</span>

<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// typeof f   &quot;object&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>a<span class="token punctuation">,</span> f<span class="token punctuation">.</span>b<span class="token punctuation">,</span> <span class="token constant">F</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token constant">F</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fn    undefined    fn    fn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>隐式原型的指向:</strong></p><p><img src="`+c+'" alt=""></p><h2 id="原型链的应用" tabindex="-1"><a class="header-anchor" href="#原型链的应用" aria-hidden="true">#</a> 原型链的应用</h2><h3 id="基础方法" tabindex="-1"><a class="header-anchor" href="#基础方法" aria-hidden="true">#</a> 基础方法</h3><p>W3C 不推荐直接使用系统成员<code>__proto__</code></p><ul><li><code>Object.getPrototypeOf(obj)</code></li></ul><p>获取对象 obj 的隐式原型</p><p><img src="'+i+`" alt=""></p><ul><li><code>objA.prototype.isPrototypeOf(objB)</code></li></ul><p>判断当前对象 objA (this)是否在指定对象 objB 的原型链上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Test 是否在son的原型链上</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>对象 instanceof 函数</code></li></ul><p>判断目标函数的原型是否在对象的原型链上，参数为函数。</p><ul><li><code>Object.create(对象)</code></li></ul><p>创建一个新对象，其隐式原型指向指定的对象。</p><ul><li><code>Object.hasOwnProperty(属性名)</code></li></ul><p>判断一个对象<strong>自身</strong>是否拥有某个属性。</p>`,43),r=[u];function d(k,b){return s(),a("div",null,r)}const v=n(l,[["render",d],["__file","05-yuanxing、yuanxinglian.html.vue"]]);export{v as default};
