import{_ as a,o as e,c as t,a as l}from"./app-0e5daedb.js";const p={},o=l(`<h1 id="文件下载" tabindex="-1"><a class="header-anchor" href="#文件下载" aria-hidden="true">#</a> 文件下载</h1><h2 id="文件下载的消息格式" tabindex="-1"><a class="header-anchor" href="#文件下载的消息格式" aria-hidden="true">#</a> 文件下载的消息格式</h2><p>服务器只要在响应头中加入<code>Content-Disposition: attachment; filename=&quot;xxx&quot;</code>即可触发浏览器的下载功能</p><p>其中：</p><ul><li>attachment 表示附件，浏览器看到此字段，触发下载行为（不同的浏览器下载行为有所区别）</li><li>filename=&quot;xxx&quot;，这是告诉浏览器，保存文件时使用的默认文件名</li></ul><p>这部分操作是由服务器完成的，和前端开发无关</p><h2 id="启用迅雷下载" tabindex="-1"><a class="header-anchor" href="#启用迅雷下载" aria-hidden="true">#</a> 启用迅雷下载</h2><p>用户可能安装了某些下载工具，这些下载工具在安装时，都会自动安装相应的浏览器插件，只要对下载地址稍作修改，就会触发浏览器使用插件进行下载，当然，不同插件的地址规则不同</p><p>比如，迅雷的下载地址规则为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>thunder://base64(AA地址ZZ)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="示例服务器提供的下载地址" tabindex="-1"><a class="header-anchor" href="#示例服务器提供的下载地址" aria-hidden="true">#</a> 示例服务器提供的下载地址</h2><p>http://localhost:8000/download/Wallpaper1.jpg</p><p>http://localhost:8000/download/Wallpaper2.jpg</p><p>http://localhost:8000/download/Wallpaper3.jpg</p><p>http://localhost:8000/download/Wallpaper4.jpg</p><p>http://localhost:8000/download/Wallpaper5.jpg</p><p>http://localhost:8000/download/Wallpaper6.jpg</p><p>http://localhost:8000/download/Wallpaper7.jpg</p><p>http://localhost:8000/download/Wallpaper8.jpg</p><p>http://localhost:8000/download/Wallpaper9.jpg</p><p>http://localhost:8000/download/Wallpaper10.jpg</p>`,21),d=[o];function n(h,i){return e(),t("div",null,d)}const c=a(p,[["render",n],["__file","20-wenjianxiazai.html.vue"]]);export{c as default};
