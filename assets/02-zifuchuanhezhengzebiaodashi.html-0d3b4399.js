import{_ as n,o as s,c as a,a as t}from"./app-b21c52a4.js";const e={},p=t(`<h1 id="_02-字符串和正则表达式" tabindex="-1"><a class="header-anchor" href="#_02-字符串和正则表达式" aria-hidden="true">#</a> 02-字符串和正则表达式</h1><h2 id="更好的-unicode-支持" tabindex="-1"><a class="header-anchor" href="#更好的-unicode-支持" aria-hidden="true">#</a> 更好的 Unicode 支持</h2><p><strong>更好的 Unicode 支持：</strong></p><ul><li>码元</li></ul><blockquote><p>早期，由于存储空间宝贵，Unicode 使用 16 位二进制来存储文字。我们将一个 16 位的二进制编码叫做一个码元（Code Unit）。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&#39;𠮷&#39;</span><span class="token punctuation">;</span> <span class="token comment">//占用了两个码元（32位）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;字符串长度：&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;使用正则测试：&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^.$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false, 按码元匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;得到第一个码元：&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 55362</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;得到第二个码元：&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 57271</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>码点</li></ul><blockquote><p>后来，由于技术的发展，Unicode 对文字编码进行了扩展，将某些文字扩展到了 32 位（占用两个码元），并且，将某个文字对应的二进制数字叫做码点（Code Point）。 ES6 为了解决这个困扰，为字符串提供了方法：<code>codePointAt</code>，根据字符串码元的位置得到其码点。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&#39;𠮷&#39;</span><span class="token punctuation">;</span> <span class="token comment">//占用了两个码元（32位）//𠮷：\\ud842\\udfb7</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;得到第一个码点：&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 134071</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;得到第二个码点：&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 57271</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>判断 char</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&#39;𠮷&#39;</span><span class="token punctuation">;</span> <span class="token comment">//占用了两个码元（32 位）/\\*</span>
<span class="token doc-comment comment">/**
 * 判断字符串 char，是 32 位，还是 16 位
 */</span>
<span class="token keyword">function</span> <span class="token function">is32bit</span><span class="token punctuation">(</span><span class="token parameter">char<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//如果码点大于了 16 位二进制的最大值，则其是 32 位的</span>
  <span class="token keyword">return</span> char<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;𠮷是否是 32 位的：&#39;</span><span class="token punctuation">,</span> <span class="token function">is32bit</span><span class="token punctuation">(</span><span class="token string">&#39;𠮷&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字符串码点长度</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 得到一个字符串码点的真实长度
 */</span>
<span class="token keyword">function</span> <span class="token function">getLengthOfCodePoint</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>leti <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//i在索引码元</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is32bit</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//当前字符串，在i这个位置，占用了两个码元</span>
      i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    len<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  returnlen<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>正则表达式<code>flag: u</code></li></ul><blockquote><p>同时，ES6 为正则表达式添加了一个<code>flag: u</code>，如果添加了该配置，则匹配时，使用码点匹配。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&#39;𠮷&#39;</span><span class="token punctuation">;</span> <span class="token comment">//占用了两个码元（32位）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;使用u 正则测试：&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^.$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, 按码点匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更多的字符串-api" tabindex="-1"><a class="header-anchor" href="#更多的字符串-api" aria-hidden="true">#</a> 更多的字符串 API</h2><p><strong>字符串的实例（原型）方法：</strong></p><ul><li><code>includes()</code></li></ul><blockquote><p>判断字符串中是否包含指定的子字符串。</p><p>第二个参数：可以指定位置。</p></blockquote><ul><li><code>startsWith()</code></li></ul><blockquote><p>判断字符串中是否以指定的字符串开始。</p><p>第二个参数：可以指定位置。</p></blockquote><ul><li><code>endsWith()</code></li></ul><blockquote><p>判断字符串中是否以指定的字符串结尾。</p><p>第二个参数：可以指定位置。</p></blockquote><ul><li><code>repeat()</code>​</li></ul><blockquote><p>将字符串重复指定的次数，然后返回一个新字符串。</p></blockquote><h2 id="扩展-正则中的粘连标记" tabindex="-1"><a class="header-anchor" href="#扩展-正则中的粘连标记" aria-hidden="true">#</a> [扩展]正则中的粘连标记</h2><p><strong>粘连标记：</strong></p><blockquote><p>标记名： <code>y</code></p><p>含义：匹配时，完全按照正则对象中的 lastIndex 位置开始匹配，并且匹配的位置必须在 lastIndex 位置。</p><p>lastindex 可以更改。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&#39;Hello World!!!&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">W\\w+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span><span class="token punctuation">;</span>
reg<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reg.lastIndex:&#39;</span><span class="token punctuation">,</span> reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展-模板字符串标记" tabindex="-1"><a class="header-anchor" href="#扩展-模板字符串标记" aria-hidden="true">#</a> [扩展]模板字符串标记</h2><p><strong>在模板字符串书写之前，可以加上标记:</strong></p><blockquote><p><code>标记名</code>模板字符串\`\` 相当于执行函数。</p><p><strong>标记是一个函数，函数参数如下：</strong></p></blockquote><blockquote><pre><code>参数1：被插值分割的字符串数组

后续参数：所有的插值
</code></pre></blockquote><ul><li>案例 2</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> text <span class="token operator">=</span> String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">abc\\t\\nbcd</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abc\\t\\nbcd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,36),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","02-zifuchuanhezhengzebiaodashi.html.vue"]]);export{r as default};
